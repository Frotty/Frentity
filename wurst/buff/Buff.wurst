package Buff
import public Entity
import public BuffObjEditing
import LinkedListModule
import Squares
import TextTagEntity
import ClosureTimers

public constant BUFF_ANIM_PERIOD = 0.25
LinkedList<Buff> array currentBuffs

public function UnitEntity.hasBuffs() returns boolean
	return currentBuffs[this castTo int] != null

public function UnitEntity.addBuff(Buff buffObj)
	if buffObj == null
		error("Cannot add null buff")
	Log.debug("Added buff")
	currentBuffs[this castTo int].add(buffObj)

public function UnitEntity.getBuff(int typeId) returns Buff
	if this.hasBuffs()
		for b from currentBuffs[this castTo int].staticItr()
			if b.typeId == typeId
				return b
	return null

public function UnitEntity.removeBuff(int typeId)
	if this.hasBuffs()
		Log.debug("Removing Buff")
		let itr = this.getBuffs().staticItr()
		for b from itr
			if b.typeId == typeId
				itr.remove()

public function UnitEntity.getBuffs() returns LinkedList<Buff>
	return currentBuffs[this castTo int]

public function UnitEntity.clearBuffs()
	let buffs = currentBuffs[this castTo int]
	if buffs != null
		Log.debug("Cleaning Buffs")
		for bff from buffs.staticItr()
			Log.debug("Clear buffs: Terminate")
			bff.terminate()
		destroy buffs
		currentBuffs[this castTo int] = null

public function UnitEntity.transferBuffs(UnitEntity otherEntity)
	if otherEntity == null
		error("Target Entity may not be null")
	if this == null
		error("Origin Entity may not be null")
	let buffs = currentBuffs[this castTo int]

	if buffs == null or buffs.size() == 0
		return

	if buffs != null
		for bff from buffs.staticItr()
			if not bff.done
				Log.debug("Apply Buff")
				bff.apply(otherEntity)
		destroy buffs
		currentBuffs[this castTo int] = null

public function UnitEntity.newBuffs() returns LinkedList<Buff>
	currentBuffs[this castTo int] = new LinkedList<Buff>()
	return currentBuffs[this castTo int]

public abstract class Buff
	use LinkedListModule

	UnitEntity target = null
	real duration
	buffTuple buffData
	boolean done = false

	construct(real duration, buffTuple buffData)
		this.duration = duration
		this.buffData = buffData

	abstract function apply(UnitEntity target)

	function onApply()

	function attackModifier()
	
	function defenseModifier()

	function onEnd()
		
	function update()
		if duration <= 0.
			Log.debug("Terminating Buff: duration <= 0.")
			terminate()
		else
			duration -= BUFF_ANIM_PERIOD
		
	function refresh()
		refresh(false)

	function refresh(boolean forceRefresh) 
		if not target.actor.hasAbility(buffData.abilId) or forceRefresh
			target.actor.addAbility(buffData.abilId)

	function terminate()
		if not done
			done = true
			destroy this
			
	ondestroy
		Log.debug("Destroy Buff")
		onEnd()
		if target != null and not target.done and target.hasBuffs()
			target.removeBuff(this.typeId)
			target.actor.removeAbility(buffData.abilId)
		target = null

init
	// Call attack and defense modifiers of buffs
	EventListener.add(EVENT_UNIT_DAMAGED) ->
		let def = GetTriggerUnit()
		let att = GetEventDamageSource()
		UnitEntity attData = att.getEntity() != null and att.isAlive() ? att.getEntity() : null
		UnitEntity defData = def.getEntity() != null and def.isAlive() ? def.getEntity() : null
		if DISABLE_TEAMATTACK and defData != null and attData != null and (defData.owner.isAllyOf(attData.owner) or defData.owner == attData.owner)
			// Falsify teamattacks
			if getDamage() > 0.5
				modifyDamage(0)
				if SHOW_SQUARE
					new TextTagEntity(defData.getPos(), vec3(GetRandomReal(-2,2),GetRandomReal(-2,2),GetRandomReal(8,10)), getSquare(), 10, .8
						,colorA(GetRandomInt(150,250),GetRandomInt(125,150),GetRandomInt(125,150), 255))
		else
			if attData.hasBuffs()
				for bff from attData.getBuffs().staticItr()
					if not bff.done
						bff.attackModifier()
		
			if defData.hasBuffs()
				for bff from defData.getBuffs().staticItr()
					if not bff.done
						bff.defenseModifier()
	
	// Update the buff display on unit upgrade					
	EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
		let v = GetTriggerUnit()
		if v.getUserData() > 0
			let victimData = v.getEntity()
			if victimData != null and not victimData.done
			doAfter(0.01) ->
				if v.getEntity() == victimData and victimData.hasBuffs()
					for bff from victimData.getBuffs().staticItr()
						bff.refresh(true)
			
	// Remove buffs when a unit dies and all other triggers fired.
	EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
		let v = GetTriggerUnit()
		if v.getEntity() != null
			let victimData = v.getEntity()
			doAfter(0.01) ->
				victimData.clearBuffs()
