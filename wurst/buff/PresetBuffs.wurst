package PresetBuffs
import public Buff

public abstract class NormalBuff extends Buff

	construct(real dur, buffTuple buffData)
		super(dur, buffData)

	override function apply(UnitEntity target)
		this.target = target
		if not target.hasBuffs()
			target.newBuffs()
		for bff in target.getBuffs()
			if bff.typeId == this.typeId
				bff.duration = duration
				destroy this
				return
		target.getBuffs().add(this)
		refresh()
		
public abstract class StackingBuff extends Buff

	construct(real dur, buffTuple buffData)
		super(dur, buffData)
			
	override function apply(UnitEntity target)			
		this.target = target
		if not target.hasBuffs()
			target.newBuffs()
		target.getBuffs().add(this)
		refresh()

public class ShieldBuff extends NormalBuff
	real blockAmount
	
	construct(real dur, buffTuple buffData, real amount)
		super(dur, buffData)
		blockAmount = amount
		
	override function update()
		super.update()
		if blockAmount <= 0
			destroy this
		
	override function apply(UnitEntity target)
		this.target = target
		if not target.hasBuffs()
			target.newBuffs()
		for bff in target.getBuffs()
			if bff.typeId == this.typeId
				let sd = bff castTo thistype
				sd.duration = duration
				sd.blockAmount += blockAmount
				destroy this
				return
		target.getBuffs().add(this)
		refresh()
		

	override function defenseModifier()
		let dmg = getDamage()
		if dmg >= blockAmount
			modifyDamageBy(-blockAmount)
			blockAmount = 0
			destroy this
		else
			modifyDamage(0)
			blockAmount = blockAmount - dmg
			
			
	override function attackModifier()