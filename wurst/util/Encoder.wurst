package Encoder
import BigNum
// Encodes numbers into ones with higher bases and represents them in the shortest possible way
// Credits: Pipedream
public constant maxInt = 2147483647
public constant maxHash = 1000

public class Encoder
	string charset
	int base
	real digits	= 0.	//logarithmic approximation
	BigNum bignum = new BigNum(base)

	construct(string charset)
		this.charset = charset
		this.base = charset.length()
	
	ondestroy
		destroy bignum

	function encode(int val, int max)
		digits = digits + log(max+1.,base+0.)
		bignum.mulSmall(max+1)
		bignum.addSmall(val)
	
	function decode(int max) returns int
		return bignum.divSmall(max+1)
	
	function isEmpty() returns boolean
		return bignum.isZero()
	
	function length() returns real
		return digits
	
	function clean()
		bignum.clean()
	
	function pad()
		BigNum_l cur = bignum.list
		BigNum_l prev = null
		int maxlen = R2I(1.0 + length())
		
		while cur != null
			prev = cur
			cur = cur.next
			maxlen--
			
		while maxlen > 0
			prev.next = new BigNum_l()
			prev = prev.next
			maxlen--
	
	
	function toString() returns string
		BigNum_l cur = bignum.list
		string s = ""
		while cur != null
			s = itochar(cur.leaf) + s
			cur = cur.next
		return s
	
	function fromString( string s )
		int i = s.length()-1
		BigNum_l cur = new BigNum_l()
		bignum.list = cur
		while true
			cur.leaf = chartoi(SubString(s,i,i+1))
			if i <= 0
				break		
			cur.next = new BigNum_l()
			cur = cur.next
			i--
	
	function hash() returns int
		int hash = 0
		int x
		BigNum_l cur = bignum.list
		while cur != null
			x = cur.leaf
			hash = ModuloInteger(hash+79*hash div (x+1) + 293*x div (1+hash - (hash div base)*base) + 479,maxHash)
			cur = cur.next
		return hash

	function save() returns string
		int hash
		clean()
		hash = hash()
		encode(hash,maxHash)
		clean()
		pad()
		return toString()
	
	function load(string s) returns boolean
		int inputhash
		fromString(s)
		inputhash = decode(maxHash)
		clean()
		let h = hash()
		return inputhash == h

	function chartoi( string c ) returns int
		int i = 0
		string cs = charset
		int len = base
		while i < len and c != SubString(cs,i,i+1)
			i = i + 1
		return i

	function itochar( int i ) returns string
		return SubString(charset,i,i+1)
	
