package SeqWorker
import public TimerUtils
import public ClosureTimers

public function doSeq(int timesPerCycle, SeqCallback cb)
	getTimer()..setData(cb castTo int)..startPeriodic(0, () -> begin
		let time = GetExpiredTimer()
		let rcb = (time.getData() castTo SeqCallback)
		if rcb.done 
			GetExpiredTimer().release()
		else
			rcb.doStep()
	end)

public abstract class PayloadCallback
	int customData = 0
	
	function doStep()
		onExecute(this)

	abstract function onExecute(PayloadCallback cb)

public abstract class SeqCallback
	int customData = 0
	boolean done = false

	function terminate()
		if not done
			done = true
			destroy this

	function doStep()
		onExecute(this)

	abstract function onExecute(SeqCallback cb)

	

