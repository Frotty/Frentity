package LZW
import HashMap
import LinkedList
import ClosureTimers
import BigString
import SeqWorker
import ErrorHandling
import Encoder

/** Lempel Ziv Welch Compression */

constant maxDictSize = 2048
constant string DICT_INIT                   = "_0123456789abcdefghijklmnopqrstuvwxyz[]"
constant string ALLOWED_PLAYER_CHARS 		= "0aUb1GLwR2kHvP3CQIM4npFs5iSW6tzAr7TNxo8JXVjy9OcdEfBKgqeuYDhmlZ"

function encodePositions(LinkedList<int> intList, int dictSize)
	if dictSize > maxDictSize
		error("dictionary size exceeds max size")
	let sc = new Encoder(ALLOWED_PLAYER_CHARS)
	let max = intList.getSize()
	sc.encode(dictSize, maxDictSize)
	for i from intList.staticItr()
		sc.encode(i, dictSize)
	let encoded = sc.save()
	print("encoded: " + encoded + " length: " + encoded.length().toString())

/**
	* @return boolean - True if compression is successful,
	* false otherwise.
	*/
public function compress(BigString data, SeqCallback onFinishCallback) 
	LinkedList<int> intList = new LinkedList<int>()
	LinkedList<string> dictionary = new LinkedList<string>()
	for c in DICT_INIT
		dictionary.add(c)
		
	int inc = 0
	doSeq(5, (SeqCallback cb) -> begin
		BigSubString A
		BigSubString B
		if (inc < data.getLength() - 1)
			print("compression Step")
			A = data.charAt(inc)  
			inc++
			B = data.charAt(inc)     //Z is next character
			A.concat(B)
			print("A: " + A.getSingle() + " B: " + B.getSingle())
			while true     //Loop until the sequence of
				if not dictionary.contains(A.getCombined())
					print("dictionary doesnt contain sequence " + A.getCombined())
					break
				print("dictionary contains sequence " + A.getCombined())
				A = new BigSubString(A.getSingle() + B.getSingle())
				print("new A: " + A.getSingle())
				inc++
				if (inc < data.getLength())
					B = data.charAt(inc)
					A.concat(B)
			
			print("adding to dict: " + A.getCombined())
			dictionary.add(A.getCombined())

			//Write index to output
			intList.add(dictionary.indexOf(A.getCombined()))
		//        output += (dictionary.indexOf(Z) + " ");
		else
			cb.terminate()
			var st = ""
			for s in dictionary
				st+= s + ","
			print("dict: " + st)
			print("inputlength: " + data.getLength().toString() + " outputlength: " + intList.getSize().toString())
			encodePositions(intList, dictionary.getSize())
			onFinishCallback.onExeute(onFinishCallback)
	end)

/**
	* @return boolean - true if successful, false otherwise.
	*/
public function decompress(LinkedList<int> ints) returns boolean
	string output = ""

	LinkedList<string> dictionary = new LinkedList<string>()
	for c in DICT_INIT
		dictionary.add(c)

	string curr
	string A
	string B

	

	// and transfer to Integer array
	print(ints.toString())
	for i = 0 to ints.getSize()-1
		A = dictionary.get(ints.get(i))
		if ((i + 1) < ints.getSize() and ints.get(i + 1) < dictionary.getSize())
			B = dictionary.get(ints.get(i + 1))
			B = B.charAt(0) + ""       //Add first letter of next String
		else if ((i) >= ints.getSize())       //Reached end of input
			B = null
		else                                //Dictionary does not have next index
			B = A.charAt(0) + ""          //must be first letter of current String
		if (B != null)
			dictionary.add(A + B)
		else
			dictionary.add(A)                //Add new sequence to dictionary
		output += (A)                    //Write to output
	print(dictionary.toString())  //Print dictionary
	print(output)  //Print dictionary
	return true