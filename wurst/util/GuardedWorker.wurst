package GuardedWorker
import LinkedList

enum TaskState
	WAITING
	WORKING
	TIMEOUT
	FINISHED

abstract class GTask
	TaskState state = TaskState.WAITING
	real progress = 0
	int noProgressCount = 0

	construct()

	function start()
		state = TaskState.WORKING
		progress = 0.
		noProgressCount = 0
		onStart()

	function finish(boolean timeout)
		if timeout
			state = TaskState.TIMEOUT
		else
			state = TaskState.FINISHED


	abstract function onStart()

	abstract function onUpdate()
		

LinkedList<GTask> taskQueue = new LinkedList<GTask>()
GTask currentTask = null
real lastProgress = -1.

public function postTask(GTask task)
	if currentTask != null
		taskQueue.add(task)
	else
		currentTask = task
		lastProgress = -1.
		currentTask.start()

function updateTask()
	if currentTask == null
		if taskQueue.size() == 0
			return
		currentTask = taskQueue.dequeue()
		lastProgress = -1.
		currentTask.start()
	
	currentTask.onUpdate()
	if lastProgress >= currentTask.progress
		currentTask.noProgressCount++
		if currentTask.noProgressCount > 15*5
			currentTask.finish(true)
	else
		lastProgress = currentTask.progress


init
	CreateTimer().startPeriodic(1./15., () -> updateTask())
