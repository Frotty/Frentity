package Entity
import public TimerUtils
import public Event
import public DupletListModule
import public TerrainUtils
import public PhysicsConstants
import public LinkedList
import public DmgMod
import public MapBounds
import ErrorHandling
import initlater DebugInfo
import initlater Buff

// If the map's height is completely flat (EBR), things can be simplified
@configurable public constant DYNAMIC_Z = true
@configurable public constant KILL_ACTORS = false

public function unit.getEntity() returns Entity
	return this.getUserData() castTo Entity
	
public function item.getEntity() returns Entity
	return this.getUserData() castTo Entity
	
public function unit.setEntity(Entity e)
	this.setUserData(e castTo int)

public function item.setEntity(Entity e)
	this.setUserData(e castTo int)
		
/** Base Entity Class  */
public abstract class Entity
	use DupletListModule
	/** 3d vector position */
	protected vec3 pos
	/** 3d vector velocity */
	protected vec3 vel
	
	/** radius */
	real radius
	/** speed factor (multiplies to added velocity) */
	real speedFactor = 1.
	
	/** owning player */
	player owner
	
	/** sleeping or active? */
	boolean flying 		= false
	boolean done 		= false
	boolean sleeps 		= true
	int idleSeconds		= 0

	construct()
		setupEntity(ZERO3, ZERO3, DUMMY_PLAYER, 0.)

	construct(player owner)
		setupEntity(ZERO3, ZERO3, owner, 0.)

	construct(player owner, vec2 pos)
		setupEntity(pos.toVec3(), ZERO3, owner, 0.)

	construct(player owner, vec3 pos)
		setupEntity(pos, ZERO3, owner, 0.)

	construct(player owner, vec3 pos, real radius)
		setupEntity(pos, ZERO3, owner, radius)
	
	construct(player owner, vec3 pos, real radius, vec3 vel)
		setupEntity(pos, vel, owner, radius)

	function setupEntity(vec3 pos, vec3 vel, player owner, real radius)
		this.pos = pos
		this.vel = vel
		this.owner = owner
		this.radius = radius
		allocationsPerSecond++
		
	function getPos() returns vec3
		return pos
		
	function setXY(vec3 pos)
		this.pos = pos

	function setPos(vec3 pos)
		this.pos = pos
		
	function addPos(vec3 pos)
		this.pos += pos
		
	function getVel() returns vec3
		return vel
		
	function setVel(vec3 vel)
		this.vel = vel
		activate()
	
	function addVel(vec3 vel)
		this.vel += vel
		activate()

	function scaleVel(real factor)
		this.vel *= factor
		
	function setTarget(vec3 tpos, real speed)
		var t = pos.distanceTo2d(tpos) / speed
		let tangle = pos.angleTo2d(tpos)
		real e = 0.
		if DYNAMIC_Z
			e = getTerrainZ(tpos.x,tpos.y)
		
		if t < 1.
			t = 1./speed
		
		let startZVelocity = ((-gravity.z * t) / 2 - pos.z/t + e/t)
		this.setVel( vec3( Cos(tangle.radians()) * speed, Sin(tangle.radians()) * speed, startZVelocity) )
		
	/** This function is called every ANIMATION_PERIOD tick if the Entity is active */
	function update()
		if sleeps and vel.lengthSquared() < 1.5
			deactivate()
		else
			pos += (vel*speedFactor)
			setXY(pos)

	function slowUpdate()
		idleSeconds++

	function terminate()
		if not done
			done = true
			destroy this

	ondestroy 
		unregisterEvents(this castTo int)
	
abstract public class UnitEntity extends Entity
	unit actor = null
	
	construct(unit actor)
		super(actor.getOwner(), actor.getPos3Real(), 0)
		setupUnitEntity(actor)
	
	construct(unit actor, vec3 pos)
		super(actor.getOwner(), pos, 0)
		setupUnitEntity(actor)
		
	construct(unit actor, vec3 pos, real radius)
		super(actor.getOwner(), pos, radius)
		setupUnitEntity(actor)

	function setupUnitEntity(unit actor)
		this.actor = actor
		if not actor.isAlive() or actor.getEntity() != null
			error("Entity aissgnment error: name: " + actor.getName() + " actor.isAlive(): " + actor.isAlive().toString() + ", actor.getEntity() != null: " + (actor.getEntity() != null).toString())
			terminate()
		else
			actor..setEntity(this)..addAbility(HEIGHT_ENABLER)..removeAbility(HEIGHT_ENABLER)
			if DYNAMIC_Z
				actor.setXYZReal(pos)
			else
				actor.setXYZ(pos)
				
	override function update()
		pos = actor.getPos3with(pos.z)
		super.update()
		
	function setNewActor(unit u)
		if u == null or not u.isAlive() or u.getEntity() != null
			error("invalid actor replacement") 
		actor.setEntity(null)
		actor.remove()
		actor = u
		actor.setEntity(this)

	override function setXY(vec3 tpos)
		if tpos.inPlayable()
			pos = tpos
			if DYNAMIC_Z
				actor.setXYZReal(pos)
			else
				actor.setXYZ(pos)
		else 
			terminate()
		
	override function setPos(vec3 tpos)
		super.setPos(tpos)
		if DYNAMIC_Z
			actor.setPosReal(pos)
		else
			actor.setPosFly(pos)
			
	override function getPos() returns vec3
		if not active
			if DYNAMIC_Z
				pos = actor.getPos3Real()
			else
				pos = actor.getPos3Fly()
		return pos
		
	ondestroy
		this.clearBuffs()
		if actor.getEntity() == this
			actor.setEntity(null)
			if actor.isAlive()
				if KILL_ACTORS
					actor.kill()
				else
					actor.remove()
		actor = null

	