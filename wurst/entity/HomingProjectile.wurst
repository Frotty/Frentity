package HomingProjectile
import public Entity
import Projectile

public enum HOMING
	none // wut
	attract // Direct homing
	angular // Chaning angle
	forced // pushed homing (warlock-like)

public interface OnReachedListener
	function run(Entity target)

public class HomingProjectile extends Projectile
	HOMING htype = HOMING.none
	Entity target = null
	real homingSpeed = 0.
	real radii = 0.

	private OnReachedListener onTargetReached = null

	construct(vec3 pos, real radius, player owner, angle xyAngle, string fxpath)
		super(pos, radius, owner, xyAngle, fxpath)

	function setTarget(Entity e, HOMING htype, real homingspeed)
		target = e
		this.htype = htype
		homingSpeed = homingspeed
		radii = radius * radius + e.radius * e.radius

	function onTargetReached(OnReachedListener listener)
		this.onTargetReached = listener

	override function update()
		super.update()

		let dist = pos.distanceToSq(target.pos + vec3(0, 0, target.radius))
		let anglexy = pos.angleTo2d(target.pos)
		if onTargetReached != null and dist < radii
			onTargetReached.run(target)

		if not done
			switch htype
				case HOMING.none
					skip
				case HOMING.attract
					vel = (target.pos - this.pos).setLength(homingSpeed)
				case HOMING.angular
					var df1 = (anglexy - getXYAngle()).radians()
					let df2 = (PI2 + anglexy.radians()) - getXYAngle().radians()
					var ns = homingSpeed

					if df1 <= 0
						if df2 <= 0
							if df2 >= df1
								df1 = df2
						else
							if -df1 >= df2
								df1 = df2
					else
						if df2 <= 0
							if -df2 <= df1
								df1 = df2
						else
							if df2 <= df1
								df1 = df2
					if df1 <= 0
						if -df1 >= ns
							ns = -ns
						else
							ns = df1
					else
						if df1 <= ns
							ns = df1
					var d = getXYAngle().radians()
					d += ns
					if d >= PI2
						d -= PI2
					else if d < 0
						d += PI2

					var newAngle = getXYAngle()
					newAngle.radians = d
					vel = newAngle.toVec(getSpeed()).toVec3()
					setXYAngle(newAngle)
				case HOMING.forced
					vec3 tmp = pos.polarProject(getSpeed(), anglexy, angle(0))

					tmp -= pos

					vel += tmp

					pos += vel

					setXY(pos)

					vel -= (vel*homingSpeed)

	ondestroy
		if onTargetReached != null
			destroy onTargetReached

