package Event
import public EventHelper
import RegisterEvents
import OnUnitEnterLeave
import ClosureTimers
import AbilityObjEditing
import initlater DebugInfo
//Listens to all PLAYER_UNIT_EVENTS plus EVENT_PLAYER_LEAVE and EVENT_UNIT_DAMAGED

public abstract class EventListener
	static EventListener array generalListenersFirsts
	static EventListener array unitListenersFirsts

	int eventId = 0
	EventListener next = null

	abstract function onEvent()
	
	static function add(eventid eventId, EventListener listener)
		listener.eventId = eventId.toIntId()
		if generalListenersFirsts[listener.eventId] != null
			listener.next = generalListenersFirsts[listener.eventId]

		generalListenersFirsts[listener.eventId] = listener
		
	static function add(unit u, eventid eventId, EventListener listener)
		let uid = u.getUserData()
		if uid <= 0
			return
		listener.eventId = eventId.toIntId()
		// print("adding eventlistener to entityid: " + uid.toString() + " eventid: " + listener.eventId.toString())
		if unitListenersFirsts[uid] != null
			// print("unit alrdy has listeners")
			listener.next = unitListenersFirsts[uid]
		unitListenersFirsts[uid] = listener
			
	static function generalEventCallback()
		let trigUnit = GetTriggerUnit()
		let id = GetTriggerEventId().toIntId()
		eventCallbacksPerSecond++
		// Unit Listeners
		if trigUnit != null
			if trigUnit.hasAbility(DONT_FIRE_EVENTS_ID)
				return
			else if unitListenersFirsts[trigUnit.getUserData()] != null
				var listener = unitListenersFirsts[trigUnit.getUserData()]
				while listener != null
					if listener.eventId == id
						// print("Execute Listener")
						listener.onEvent()
					listener = listener.next
		// General Listeners		
		if generalListenersFirsts[id] != null
			var listener = generalListenersFirsts[id]
			while listener != null
				listener.onEvent()
				listener = listener.next
		
	ondestroy
		next = null
	
trigger unitTrig = CreateTrigger()
trigger leaveTrig = CreateTrigger()
trigger keyTrig = CreateTrigger()

public function eventid.toIntId() returns int
	var id = eventidToIndex[this.getHandleId()]
	if id == 0
		id = registerEventId(this)
	return id
			
int array eventidToIndex
int eventTypeCounter = 0

function registerEventId(eventid evnt) returns int
	let eventId = evnt.getHandleId()
	eventTypeCounter++
	eventidToIndex[eventId] = eventTypeCounter
	if evnt.isPlayerunitEvent()
		printLog(Loglevel.DEBUG, "reg handleid: " + eventId.toString() + " -> eventId: " + eventTypeCounter.toString())
		registerPlayerUnitEvent(ConvertPlayerUnitEvent(eventId), function EventListener.generalEventCallback)
	else if evnt != EVENT_UNIT_DAMAGED and evnt != EVENT_PLAYER_LEAVE and not evnt.isKeyboardEvent()
		printLog(Loglevel.ERROR, "registering handleid: " + eventId.toString() + " non-playerunitevent. Except EVENT_UNIT_DAMAGED and EVENT_PLAYER_LEAVE these are not supported right now.")
	return eventTypeCounter
	
function registerEventsForUnit(unit u)
	unitTrig.registerUnitEvent(u, EVENT_UNIT_DAMAGED)

public function unregisterEventsForUnit(unit u)
	unregisterEvents(u.getUserData())

public function unregisterEvents(int id)
	if id > 0 and EventListener.unitListenersFirsts[id] != null
		printLog(Loglevel.TRACE, "unregister unit has listeners. startid: " + id.toString())
		var listener = EventListener.unitListenersFirsts[id]
		EventListener.unitListenersFirsts[id] = null
		while listener != null
			let t = listener
			listener = listener.next
			destroy t

init
	doAfter(0.0, () -> begin
		// Register Events when unit enters map
		onEnter(() -> registerEventsForUnit(getEnterLeaveUnit()))
		// Delete 
		onLeave(() -> unregisterEventsForUnit(getEnterLeaveUnit()))
		
		// Register Actions
		unitTrig.addAction(() -> EventListener.generalEventCallback())	
		leaveTrig.addAction(function EventListener.generalEventCallback)
		keyTrig.addAction(function EventListener.generalEventCallback)

		for i = 0 to bj_MAX_PLAYERS-1
			leaveTrig.registerPlayerEvent(players[i], EVENT_PLAYER_LEAVE)
			keyTrig.registerPlayerEvent(players[i], EVENT_PLAYER_ARROW_DOWN_DOWN)
			keyTrig.registerPlayerEvent(players[i], EVENT_PLAYER_ARROW_DOWN_UP)
			keyTrig.registerPlayerEvent(players[i], EVENT_PLAYER_ARROW_UP_DOWN)
			keyTrig.registerPlayerEvent(players[i], EVENT_PLAYER_ARROW_UP_UP)
			keyTrig.registerPlayerEvent(players[i], EVENT_PLAYER_ARROW_LEFT_DOWN)
			keyTrig.registerPlayerEvent(players[i], EVENT_PLAYER_ARROW_LEFT_UP)
			keyTrig.registerPlayerEvent(players[i], EVENT_PLAYER_ARROW_RIGHT_DOWN)
			keyTrig.registerPlayerEvent(players[i], EVENT_PLAYER_ARROW_RIGHT_UP)
	end)

public constant DONT_FIRE_EVENTS_ID = 'dont'
@compiletime function genObj()
	new AbilityDefinitionDefenseBonusPlus1(DONT_FIRE_EVENTS_ID)
	..setDefenseBonus(1, 0)
	..setName("Dummy Event Ability")