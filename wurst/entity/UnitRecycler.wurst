package UnitRecycler
import HashMap
import Event
import MapBounds
import DummyRecycler
import initlater Entity
constant MAX_RECYCLE_PER_UNIT = 100

/**
	Too complicated and slow or not enough improvement
*/

class UnitList
	unit u
	UnitList next = null
	int size = 0

	construct(unit u)
		this.u = u
		unregisterEventsForUnit(u)

	function getUnit() returns unit
		return u

	ondestroy
		next = null

	function add(UnitList entry)
		var t = this
		while t.next != null
			t = t.next
		t.next = entry
		size++

UnitList array normalStacks
UnitList array locustStacks

public function getLocustUnit(player owner, int utypeId, vec3 position, angle facing, Entity index) returns unit
	return getLocustUnit(owner, utypeId, position.toVec2(), facing, index)

public function getLocustUnit(player owner, int utypeId, vec2 position, angle facing, Entity index) returns unit
	return getUnit(1, owner, utypeId, position, facing, index)..addAbility(LOCUST_ID)

public function getUnit(player owner, int utypeId, vec3 position, angle facing, Entity index) returns unit
	return getUnit(owner, utypeId, position.toVec2(), facing, index)

public function getUnit(player owner, int utypeId, vec2 position, angle facing, Entity index) returns unit
	return getUnit(0, owner, utypeId, position, facing, index)

public function getUnit(int stackId, player owner, int utypeId, vec2 position, angle facing, Entity entity) returns unit
	// let index = entity.typeId
	// if stackId == 0
	// 	if normalStacks[index] != null
	// 		let list = normalStacks[index]
	// 		if list.next != null
	// 			list.next.size = list.size-1
	// 			normalStacks[index] = list.next
	// 		else
	// 			normalStacks[index] = null
	// 		let u = list.getUnit()..setOwner(owner, true)..setFacing(facing)..setXY(position)..show()..unpause()..removeAbility(GHOST_INVIS_ID)..removeAbility(DONT_FIRE_EVENTS_ID)
	// 		u..setMoveSpeed(GetUnitDefaultMoveSpeed(u))..setVertexColor(255, 125, 125, 155)
	// 		destroy list
	// 		return u
	// else if stackId == 1
	// 	if locustStacks[index] != null
	// 		let list = locustStacks[index]
	// 		if list.next != null
	// 			list.next.size = list.size-1
	// 			locustStacks[index] = list.next
	// 		else
	// 			locustStacks[index] = null
	// 		let u = list.getUnit()..setOwner(owner, true)..setFacing(facing)..setXY(position)..show()..unpause()..removeAbility(GHOST_INVIS_ID)..removeAbility(DONT_FIRE_EVENTS_ID)
	// 		u..setMoveSpeed(GetUnitDefaultMoveSpeed(u))..setVertexColor(255, 125, 125, 155)
	// 		destroy list
	// 		return u
	return createUnit(owner, utypeId, position, facing)

public function unit.recycle()
	// let id = this.getEntity().typeId
	this.setUserData(0)
	// this..addAbility(GHOST_INVIS_ID)..removeAbility(GHOST_VIS_ID)..addAbility(DONT_FIRE_EVENTS_ID)
	// ..setXY(boundMax-vec2(128,128))..pause()..issueImmediateOrder("stop")..hide()
	// if this.hasAbility(LOCUST_ID)
	// 	this.removeAbility(LOCUST_ID)
	// 	if locustStacks[id] == null
	// 		locustStacks[id] = new UnitList(this)
	// 	else 
	// 		let list = locustStacks[id]
	// 		if list.size < MAX_RECYCLE_PER_UNIT
	// 			list.add(new UnitList(this))
	// 		else
	// 			this.remove()
	// else
	// 	if normalStacks[id] == null
	// 		normalStacks[id] = new UnitList(this)
	// 	else 
	// 		let list = normalStacks[id]
	// 		if list.size < MAX_RECYCLE_PER_UNIT
	// 			list.add(new UnitList(this))
	// 		else
	this.remove()

	